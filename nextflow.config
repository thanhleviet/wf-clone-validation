//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    out_dir = "output"
    multiple_samples = true // Multiple samples
    wfversion = "v0.1.4"
    fastq = false
    db_directory = "${projectDir}/data/BLAST_db"
    sanitize_fastq = false
    samples = false
    threads = 4
    host_reference = "NO_HOST_REF"
    regions_bedfile = "NO_REG_BED"
    approx_size = 7000
    assm_coverage = 60
    trim_length = 150
    canu_useGrid = false
    prefix = null
    min_barcode = null
    max_barcode = null
    primers = "$projectDir/data/primers.tsv"
    reference = null
    report_name= "report"

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion'
}

manifest {
    name            = 'epi2me-labs/wf-clone-validation'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-clone-validation'
    description     = 'Clone validation workflow'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
}


executor {
    $local {
        cpus = 20
        memory = "16 GB"
    }
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
        process {
            withLabel:wfplasmid {
                container = "ontresearch/wf-clone-validation:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    
    // profile using conda environments rather than docker
    // containers
    conda {
        docker {
            enabled = false
        }
        process {
            withLabel:wfplasmid {
                conda = "${projectDir}/environment.yaml"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
        conda {
             cacheDir = ""
             useMamba = true
        }
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '16G'
            container = "${params.aws_image_prefix}-wf-clone-validation:${params.wfversion}"
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
