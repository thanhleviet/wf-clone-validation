//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    out_dir = "output"
    multiple_samples = true // Multiple samples
    wfversion = "v0.1.4"
    fastq = false
    db_directory = "/share/nick_plasmids/wf-clone-validation-db"
    sanitize_fastq = false
    samples = false
    threads = 16
    host_reference = "NO_HOST_REF"
    regions_bedfile = "NO_REG_BED"
    approx_size = 7000
    assm_coverage = 60
    trim_length = 150
    rotate = true
    canu_useGrid = false
    prefix = null
    min_barcode = null
    max_barcode = null
    primers = "$projectDir/data/primers.tsv"
    reference = null
    report_name= "report"

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion'
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

profiles {
    // profile using conda environments rather than docker
    // containers
    standard {
        docker {
            enabled = false
        }
        process {
            conda = '/home/ubuntu/miniconda3/envs/wf-clone-validation'
            errorStrategy = {task.attempt < 3 ? 'retry' : 'ignore'}
            maxRetries = 3
            withLabel: wfplasmid {
                // conda = "environment.yaml"
                cpus = 4
                // errorStrategy = 'ignore'
            }

            withName: ROTATE {
                conda = '/home/ubuntu/miniconda3/envs/pLannotate'
                errorStrategy = {task.attempt < 3 ? 'retry' : 'ignore'}
                cpus = 16
                memory = {task.attempt * 4.GB + 32.GB}
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }

        tower {
            accessToken = 'eyJ0aWQiOiAzMTI3fS4xZWM5MjUzNTQyMzNkNjgxMjhiNGRiM2U1ZGZmY2Y4ZDVhMjNjMTZi'
            enabled = true
        }
    }

    singularity {
        singularity {
            enabled = true
            autoMount = true
        }
        process {

            errorStrategy = {task.attempt < 3 ? 'retry' : 'ignore'}
            
            withLabel: wfplasmid {
                container = '/share/nick_plasmids/wf-clone-validation.sif'
            }
            
            withName: report {
                cpus = 16
                memory = {task.attempt * 4.GB + 32.GB}
            }

            withName: ROTATE {
                conda = '/home/ubuntu/miniconda3/envs/pLannotate'
                cpus = 16
                memory = {task.attempt * 4.GB + 32.GB}
            }
        }

        tower {
            accessToken = 'eyJ0aWQiOiAzMTI3fS4xZWM5MjUzNTQyMzNkNjgxMjhiNGRiM2U1ZGZmY2Y4ZDVhMjNjMTZi'
            enabled = true
        }
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '16G'
            container = "${params.aws_image_prefix}-wf-clone-validation:${params.wfversion}"
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
